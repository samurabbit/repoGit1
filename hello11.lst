     1                                  ;hello11.asm
     2                                  ;change number to ascii to print
     3                                  
     4                                  %include 'functions.asm'
     5                              <1> ;--------------------------------------
     6                              <1> ;int atoi(string number)
     7                              <1> ;trans ascii to int
     8                              <1> ;input:EAX addr of string
     9                              <1> ;output:EAX int
    10                              <1> 
    11                              <1> atoi:
    12                              <1> 	;save regs
    13 00000000 6653                <1> 	push	ebx
    14 00000002 6651                <1> 	push	ecx
    15 00000004 6652                <1> 	push	edx
    16 00000006 6656                <1> 	push	esi
    17                              <1> 	
    18                              <1> 	;get length of string
    19 00000008 6689C6              <1> 	mov	esi,eax
    20 0000000B E88E00              <1> 	call	slen
    21 0000000E 6689C1              <1> 	mov	ecx,eax
    22 00000011 66BA0A000000        <1> 	mov	edx,10
    23                              <1> 
    24                              <1> 	;loop for chars
    25                              <1> .loopChar:
    26 00000017 6631DB              <1> 	xor	ebx,ebx
    27 0000001A 678A1E              <1> 	mov	bl,byte[esi]
    28 0000001D 80FB30              <1> 	cmp	bl,48
    29 00000020 7C0F                <1> 	jl	.zeroSet
    30 00000022 80FB39              <1> 	cmp	bl,57
    31 00000025 7F0A                <1> 	jg	.zeroSet
    32 00000027 66F7E2              <1> 	mul	edx
    33 0000002A 6601D8              <1> 	add	eax,ebx
    34 0000002D E2E8                <1> 	loop	.loopChar
    35 0000002F EB06                <1> 	jmp	.finish
    36                              <1>   .zeroSet:
    37 00000031 66B800000000        <1> 	mov	eax,0		;if not pure number,set to 0
    38                              <1> 
    39                              <1> 	;restore
    40                              <1> .finish:
    41 00000037 665E                <1> 	pop	esi
    42 00000039 665A                <1> 	pop	edx
    43 0000003B 6659                <1> 	pop	ecx
    44 0000003D 665B                <1> 	pop	ebx
    45 0000003F C3                  <1> 	ret
    46                              <1> 
    47                              <1> ;--------------------------------------
    48                              <1> ;void iprint(int)
    49                              <1> ;int turn to ascii and print
    50                              <1> ;a number bigger than 10 is div to N part
    51                              <1> ;and save in stack. then pop to print
    52                              <1> 
    53                              <1> iprint:
    54 00000040 6650                <1> 	push	eax
    55 00000042 6651                <1> 	push	ecx
    56 00000044 6652                <1> 	push	edx
    57 00000046 6656                <1> 	push	esi
    58 00000048 66B900000000        <1> 	mov	ecx,0
    59                              <1> divLoop:
    60 0000004E 6641                <1> 	inc	ecx
    61 00000050 66BA00000000        <1> 	mov	edx,0
    62 00000056 66BE0A000000        <1> 	mov	esi,10
    63 0000005C 66F7FE              <1> 	idiv	esi
    64 0000005F 6683C230            <1> 	add	edx,48
    65 00000063 6652                <1> 	push	edx
    66 00000065 6683F800            <1> 	cmp	eax,0
    67 00000069 75E3                <1> 	jnz	divLoop
    68                              <1> printLoop:
    69 0000006B 6649                <1> 	dec	ecx
    70 0000006D 6689E0              <1> 	mov	eax,esp
    71 00000070 E83E00              <1> 	call	sprint
    72 00000073 6658                <1> 	pop	eax
    73 00000075 6683F900            <1> 	cmp	ecx,0
    74 00000079 75F0                <1> 	jnz	printLoop
    75                              <1> 
    76 0000007B 665E                <1> 	pop	esi
    77 0000007D 665A                <1> 	pop	edx
    78 0000007F 6659                <1> 	pop	ecx
    79 00000081 6658                <1> 	pop	eax
    80 00000083 C3                  <1> 	ret
    81                              <1> 
    82                              <1> ;--------------------------------------
    83                              <1> ;void iprintLF(int)
    84                              <1> ;iprint with a LF
    85                              <1> ;use stack addr to send print
    86                              <1> 
    87                              <1> iprintLF:
    88 00000084 E8B9FF              <1> 	call	iprint
    89                              <1> 
    90 00000087 6650                <1> 	push	eax
    91 00000089 66B80A000000        <1> 	mov	eax,0ah
    92 0000008F 6650                <1> 	push	eax
    93 00000091 6689E0              <1> 	mov	eax,esp
    94 00000094 E81A00              <1> 	call	sprint
    95 00000097 6658                <1> 	pop	eax
    96 00000099 6658                <1> 	pop	eax
    97 0000009B C3                  <1> 	ret
    98                              <1> 
    99                              <1> 
   100                              <1> ;--------------------------------------
   101                              <1> ;int slen(string message)
   102                              <1> ;string length calculation function
   103                              <1> ;input:EAX as addr of string
   104                              <1> ;output:EAX as length of string
   105                              <1> 
   106                              <1> slen:
   107 0000009C 6653                <1> 	push	ebx
   108 0000009E 6689C3              <1> 	mov	ebx,eax
   109                              <1>   nextchar:
   110 000000A1 67803800            <1>   	cmp	byte[eax],0
   111 000000A5 7404                <1> 	jz	finished
   112 000000A7 6640                <1> 	inc	eax
   113 000000A9 EBF6                <1> 	jmp	nextchar
   114                              <1>   finished:
   115 000000AB 6629D8              <1>   	sub	eax,ebx
   116 000000AE 665B                <1> 	pop	ebx
   117 000000B0 C3                  <1> 	ret
   118                              <1> 
   119                              <1> ;--------------------------------------
   120                              <1> ;void sprint(string message)
   121                              <1> ;String pring function
   122                              <1> ;input:EAX as addr of string
   123                              <1> ;output:I/O
   124                              <1> 
   125                              <1> sprint:
   126 000000B1 6652                <1> 	push	edx
   127 000000B3 6651                <1> 	push	ecx
   128 000000B5 6653                <1> 	push	ebx
   129 000000B7 6650                <1> 	push	eax
   130                              <1> 	
   131 000000B9 6689C1              <1> 	mov	ecx,eax
   132                              <1> 
   133 000000BC E8DDFF              <1> 	call	slen
   134                              <1> 
   135 000000BF 6689C2              <1> 	mov	edx,eax
   136 000000C2 66BB01000000        <1> 	mov	ebx,1
   137 000000C8 66B804000000        <1> 	mov	eax,4
   138 000000CE CD80                <1> 	int	80h
   139                              <1> 
   140 000000D0 6658                <1> 	pop	eax
   141 000000D2 665B                <1> 	pop	ebx
   142 000000D4 6659                <1> 	pop	ecx
   143 000000D6 665A                <1> 	pop	edx
   144 000000D8 C3                  <1> 	ret
   145                              <1> 
   146                              <1> 
   147                              <1> ;--------------------------------------
   148                              <1> ;void printLF(string message)
   149                              <1> ;string print with a line feed
   150                              <1> ;use stack to store temp data
   151                              <1> ;input:EAX addr of string
   152                              <1> ;output:I/O
   153                              <1> 
   154                              <1> sprintLF:
   155 000000D9 E8D5FF              <1> 	call	sprint
   156                              <1> 
   157 000000DC 6650                <1> 	push	eax
   158 000000DE 66B80A000000        <1> 	mov	eax,0ah
   159 000000E4 6650                <1> 	push	eax
   160 000000E6 6689E0              <1> 	mov	eax,esp
   161 000000E9 E8C5FF              <1> 	call	sprint
   162                              <1> 	
   163 000000EC 6658                <1> 	pop	eax
   164 000000EE 6658                <1> 	pop	eax
   165 000000F0 C3                  <1> 	ret
   166                              <1> 
   167                              <1> 
   168                              <1> ;--------------------------------------
   169                              <1> ;void exit()
   170                              <1> ;Exit program and restore resources
   171                              <1> 
   172                              <1> quit:
   173 000000F1 6653                <1> 	push	ebx
   174 000000F3 6650                <1> 	push	eax
   175                              <1> 
   176 000000F5 66BB00000000        <1> 	mov	ebx,0
   177 000000FB 66B801000000        <1> 	mov	eax,1
   178 00000101 CD80                <1> 	int	80h
   179                              <1> 
   180 00000103 6658                <1> 	pop	eax
   181 00000105 665B                <1> 	pop	ebx
   182                              <1> 
   183 00000107 C3                  <1> 	ret
   184                              <1> 
     5                                  
     6                                  SECTION .text
     7                                  global _start
     8                                  _start:
     9 00000108 66B900000000            	mov	ecx,0
    10                                  
    11                                  nextNum:
    12 0000010E 6641                    	inc	ecx
    13 00000110 6689C8                  	mov	eax,ecx
    14 00000113 E86EFF                  	call	iprintLF
    15 00000116 6683F90A                	cmp	ecx,10
    16 0000011A 75F2                    	jne	nextNum
    17                                  
    18 0000011C E8D2FF                  	call	quit
    19                                  
